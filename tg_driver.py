import telebot
from telebot import types
from key_token import key, dict_url, youglish_url
from audio_send import download_and_send_audio
from discription import get_word_info
from search_verbs import search_in_database

bot = telebot.TeleBot(key)
user_states1 = {}
user_states2 = {}
user_states3 = {}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    command1 = types.InlineKeyboardButton("‚ùî–©–æ —Ü–µ –∑–∞ —Å–ª–æ–≤–æ‚ùî", callback_data="command1")
    command2 = types.InlineKeyboardButton("üëåIrregular Verbsüëå", callback_data="command2")
    command3 = types.InlineKeyboardButton("üé¨–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —è–∫ —Ä–æ–∑–º–æ–≤–ª—è—é—Ç—åüé¨", callback_data="command3")
    markup.row(command1)
    markup.row(command2)
    markup.row(command3)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤—ñ—Çüñê —è –±–æ—Çü§ñ —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑ –ê–Ω–≥–ª—ñ–π—Å—å–∫–æ—éüá¨üáß \n–í–∏–±–∏—Ä–∞–π, —â–æ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤–æüëá", reply_markup=markup)


@bot.message_handler(commands=['info'])
def send_info(message):
    text = f'–î—è–∫—É—é —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –±–æ—Ç–∞ü§ó\n\n–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–µ –Ω–µ—Å–µ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—ó –º–µ—Ç–∏.\n\n–Ø–∫—â–æ —É –≤–∞—Å —î –±–∞–∂–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–≤–∏—Ç–æ–∫ –±–æ—Ç–∞ - –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:https://send.monobank.ua/jar/3VEN7VhyNn'
    bot.send_message(message.chat.id, text)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "command1":
        handle_command1(call.message)
    elif call.data == "command2":
        handle_command2(call.message)
    elif call.data == "command3":
        handle_command3(call.message)
    elif call.data == "ext":
        send_welcome(call.message)


def handle_command1(message):
    get_user_input1(message, user_states1)


def handle_command2(message):
    get_user_input2(message, user_states2)


def handle_command3(message):
    get_user_input3(message, user_states3)


def get_user_input1(message, user_states):
    bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —Å–ª–æ–≤–æ, —è–∫–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å.\n–°–ø—Ä–æ–±—É—é –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —É –Ω–æ—Å—ñ—ó–≤, —â–æ –≤–æ–Ω–æ —Ç–∞–∫–µüëÄ")
    user_states[message.chat.id] = {"waiting_for_input": True, "prompt": "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 1"}


def get_user_input2(message, user_states):
    bot.send_message(message.chat.id, f"–í–∏–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ –∑ –¥—ñ—î—Å–ª–æ–≤–∞–º–∏?\n–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–æ, —è–∫–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—åüìñ\n–Ø –∑–∞–ø–∏—Ç–∞—é —Å–≤–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞, —è–∫—ñ —Ç–∞–º —î 3 —Ñ–æ—Ä–º–∏ü§ì")
    user_states[message.chat.id] = {"waiting_for_input": True, "prompt": "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 2"}


def get_user_input3(message, user_states):
    bot.send_message(message.chat.id, f"–î–∞–≤–∞–π –ø–æ–¥–∏–≤–∏–º–æ—Å—è, —è–∫ –Ω–æ—Å—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Å–∫–ª–∞–¥–Ω—ñ —Å–ª–æ–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñüìΩ \n–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —Å–ª–æ–≤–æ —ñ –≤—ñ–∑—å–º–∏ –∑ —Å–æ–±–æ—é —â–æ—Å—å –ø–µ—Ä–µ–∫—É—Å–∏—Ç–∏üçø")
    user_states[message.chat.id] = {"waiting_for_input": True, "prompt": "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 2"}


@bot.message_handler(func=lambda message: True)
def handle_user_text(message):
    chat_id = message.chat.id

    if chat_id in user_states1 and user_states1[chat_id]["waiting_for_input"]:
        user_text = message.text
        prompt = user_states1[chat_id]["prompt"]

        task = dict_url + user_text
        if user_text:
            result = get_word_info(task)
            if result is not None:
                title, transcription, description = result

                answer = f"üìñ –°–ª–æ–≤–æ: {title}\n\nüé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è: ({transcription}) \n\nüí≠ –û–ø–∏—Å: {description} \n\n–Ø–∫ –∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ üëá"

                bot.send_message(message.chat.id, answer)
                download_and_send_audio(task, message.chat.id)
            else:
                bot.send_message(message.chat.id, f"–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞üòî \n–î–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑üîÄ")

            markup = types.InlineKeyboardMarkup()
            repeat_button = types.InlineKeyboardButton("–©–µ –æ–¥–Ω–µ —Å–ª–æ–≤–æ", callback_data="command1")
            exit_button = types.InlineKeyboardButton(f"‚Ü©Ô∏è–í–∏—Ö—ñ–¥‚Ü©Ô∏è", callback_data="ext")
            markup.row(repeat_button)
            markup.row(exit_button)

            del user_states1[chat_id]

            bot.send_message(chat_id, "–©–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?üßê", reply_markup=markup)

    elif chat_id in user_states2 and user_states2[chat_id]["waiting_for_input"]:
        user_text = message.text
        prompt = user_states2[chat_id]["prompt"]
        user_verbs = user_text.lower()
        data_verb = search_in_database(user_verbs)
        if data_verb is not None and len(data_verb) > 0:
            form1 = data_verb[0][1]
            form2 = data_verb[0][2]
            form3 = data_verb[0][3]
            trans = data_verb[0][4]
            verb_text = f"1Ô∏è‚É£Infinitive: {form1}\n\n2Ô∏è‚É£Past Simple: {form2}\n\n3Ô∏è‚É£Past Participle: {form3}\n\nüá∫üá¶–ü–µ—Ä–µ–∫–ª–∞–¥: {trans}"
            bot.send_message(message.chat.id, verb_text)
        else:
            bot.send_message(message.chat.id, f'–ù–∞–ø–µ–≤–Ω–æ, —è –Ω–µ –∑–Ω–∞—é —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞üòî \n–ú–æ–∂–ª–∏–≤–æ, —Ç–æ–±—ñ –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ (-"ed") –≤ –∫—ñ–Ω–µ—Ü—å —Å–ª–æ–≤–∞')

        markup = types.InlineKeyboardMarkup()
        repeat_button = types.InlineKeyboardButton("–©–µ –æ–¥–Ω–µ —Å–ª–æ–≤–æ", callback_data="command2")
        exit_button = types.InlineKeyboardButton(f"‚Ü©Ô∏è–í–∏—Ö—ñ–¥‚Ü©Ô∏è", callback_data="ext")
        markup.row(repeat_button)
        markup.row(exit_button)

        del user_states2[chat_id]

        bot.send_message(chat_id, "–©–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?üßê", reply_markup=markup)

    elif chat_id in user_states3 and user_states3[chat_id]["waiting_for_input"]:
        user_text = message.text
        url_text = "-".join(user_text.split())
        url_video = youglish_url+url_text

        markup = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–î–∏–≤–∏—Ç–∏—Å—è –≤—ñ–¥–µ–æ‚ñ∂Ô∏è", url=url_video)
        exit_button = types.InlineKeyboardButton(f"‚Ü©Ô∏è–í–∏—Ö—ñ–¥‚Ü©Ô∏è", callback_data="ext")
        markup.row(url_button)
        markup.row(exit_button)

        bot.send_message(message.chat.id, f"–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ‚ñ∂Ô∏è\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—Éü§ó", reply_markup=markup)


@bot.message_handler(commands=['info'])
def send_info(message):
    text = '–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–µ –Ω–µ—Å–µ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—ó –º–µ—Ç–∏. –î—è–∫—É—é —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –±–æ—Ç–∞. –í—ñ–¥–≥—É–∫–∏ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —É –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö @–∞—Ä—Ç–µ–º_pindich'
    bot.send_message(message.chat.id, text)


bot.polling(none_stop=True)
